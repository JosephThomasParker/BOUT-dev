#!/usr/bin/env python
#
# Test of staggered grids for wave equation
#
# Runs the test case twice, once with staggered grids enabled, and
# once with staggered grids disabled.
#
# In each case, a top-hat density perturbation is used
# to give a mixture of starting modes. By taking the FFT
# in both time and space, the frequency of each mode is
# calculated.
#

from __future__ import print_function
from boutdata.collect import collect
import matplotlib.pyplot as plt

from boututils.run_wrapper import shell, launch

def analyse(filename,path="test"):
  """
  Reads in density "n" and velocity "v", and plots.
  """

  # Read the data
  n = collect("n", path=path)
  v = collect("v", path=path)
  fig1 = plt.figure(num = 1, facecolor='w', edgecolor='k')
  plt.plot(n[0,2,:,0],label="CENTER")
  plt.plot(v[0,2,:,0],label="YLOW")
  plt.grid()
  plt.legend(loc=0)
  plt.ylim(0.990,1.010)
  fig1.savefig(filename, facecolor='w', edgecolor='w', orientation='portrait')
  fig1.clf()


####################################################

print("Making staggered test")
shell("make > make.log")

# Run with and without staggered grids
for stag in ["true","false"]:
    # Run with and without symmetricGlobalY
    for glob in ["true","false"]:
        # Run with and without periodic grids

        # Periodic
        s, out = launch("./test_staggered -d test mesh:StaggerGrids="+stag+" mesh:symmetricGlobalY="+glob+" mesh:ixseps1=-1 mesh:ixseps2=0", nproc=1, pipe=True)
        with open("run.log.stag", "w") as f:
          f.write(out)

        analyse("StaggerGrids_"+stag+"_symmetricGlobalY_"+glob+".png")
###        analyse("StaggerGrids_"+stag+"_symmetricGlobalY_"+glob+"_nonperiodic.png")

###        print("Running without staggered grids")
###        s, out = launch("./test_staggered -d test mesh:StaggerGrids="+stag+" mesh:symmetricGlobalY="+glob+" mesh:ixseps1=-10000 mesh:ixseps2=10000", nproc=1, pipe=True)
###        with open("run.log.nostag", "w") as f:
###          f.write(out)
###
###        analyse("StaggerGrids_"+stag+"_symmetricGlobalY_"+glob+"_periodic.png")


